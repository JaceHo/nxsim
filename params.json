{"name":"Nxsim","tagline":"nxsim is a Python package for simulating agents in a network","body":"# [nxsim](https://github.com/kentwait/nxsim)\r\n\r\nNxsim is a Python package for simulating agents connected by any type of network using\r\nSimPy and Networkx in Python 3.4.\r\n\r\n## Install\r\n\r\n    pip3 install nxsim  # from PyPI\r\n    pip3 install git+git://github.com/kentwait/nxsim.git  # from GitHub\r\n\r\n## Quickstart\r\nNxsim provides a framework for doing forward-time simulations of events occurring in a network. It uses Networkx to\r\ncreate a network and SimPy 3 to create agents over each node in the network.\r\n\r\nTo create a simulation, nxsim requires a graph generated by Networkx and an \"agent\" class to populate each node of the\r\nnetwork.\r\n\r\nFirst, create a graph using Networkx.\r\n\r\n    import networkx as nx\r\n\r\n    number_of_nodes = 10\r\n    G = nx.complete_graph(number_of_nodes)\r\n\r\nThen, subclass *BaseNetworkAgent* to create your own agent based on your needs.\r\n\r\n    from nxsim import BaseNetworkAgent\r\n\r\n    # Just like subclassing a process in SimPy\r\n    class MyAgent(BaseNetworkAgent):\r\n        def __init__(self, environment=None, agent_id=0, state=()):  # Make sure to have these three keyword arguments\r\n            super().__init__(environment=environment, agent_id=agent_id, state=state)\r\n            # Add your own attributes here\r\n\r\n        def run(self):\r\n            # Add your behaviors here\r\n\r\nNotice that \"agents\" in nxsim use the same concepts as \"processes\" in SimPy 3 except that their interactions can be\r\nlimited by the graph in the simulation environment. For more information about SimPy, they have a great introduction\r\nposted on their [website](https://simpy.readthedocs.org/en/latest/simpy_intro/index.html).\r\n\r\nHere is a graph-based example:\r\n\r\n    import random\r\n    from nxsim import BaseNetworkAgent\r\n\r\n    class ZombieOutbreak(BaseNetworkAgent):\r\n        def __init__(self, environment=None, agent_id=0, state=()):\r\n            super().__init__(environment=environment, agent_id=agent_id, state=state)\r\n            self.bite_prob = 0.05\r\n\r\n        def run(self):\r\n            while True:\r\n                if self.state['id'] == 1:\r\n                    self.zombify()\r\n                    yield self.env.timeout(1)\r\n                else:\r\n                    yield self.env.event()\r\n\r\n        def zombify(self):\r\n            normal_neighbors = self.get_neighboring_agents(state_id=0)\r\n            for neighbor in normal_neighbors:\r\n                if random.random() < self.bite_prob:\r\n                    neighbor.state['id'] = 1  # zombie\r\n                    print(self.env.now, self.id, neighbor.id, sep='\\t')\r\n                    break\r\n\r\nYou can now set-up your simulation by creating a *NetworkSimulation* instance.\r\n\r\n    from nxsim import NetworkSimulation\r\n\r\n    # Initialize agent states. Let's assume everyone is normal.\r\n    # Add keys as as necessary, but \"id\" must always refer to that state category\r\n    init_states = [{'id': 0, } for _ in range(number_of_nodes)]\r\n\r\n    # Seed a zombie\r\n    init_states[5] = {'id': 1}\r\n    sim = NetworkSimulation(topology=G, states=init_states, agent_type=ZombieOutbreak,\r\n                            max_time=30, dir_path='sim_01', num_trials=1, logging_interval=1.0)\r\n\r\nAnd finally, start it up.\r\n\r\n    sim.run_simulation()\r\n\r\nRunning the simulation saves pickled dictionaries into the *dir_path* folder, in this case to \"sim_01\".\r\nNow, let's retrieve the history and states of the trial\r\n\r\n    trial = BaseLoggingAgent.open_trial_state_history(dir_path='sim_01', trial_id=0)\r\n\r\nAnd plot the number of zombies per time interval using matplotlib:\r\n\r\n    from matplotlib import pyplot as plt\r\n    zombie_census = [sum([1 for node_id, state in g.items() if state['id'] == 1]) for t,g in trial.items()]\r\n    plt.plot(zombie_census)\r\n\r\nAnd that's it!\r\n\r\n## Note\r\nThis package is still under development. If you encounter a bug, please file an issue at [https://github.com/kentwait/nxsim/issues](https://github.com/kentwait/nxsim/issues) to get it resolved.\r\n\r\n## Acknowledgment\r\nThanks to JoÃ© Schaul for bringing [ComplexNetworkSim](https://github.com/jschaul/ComplexNetworkSim) to the world.\r\nThis project is a SimPy 3- and Python 3.4-compatible fork of ComplexNetworkSim.\r\n\r\n## Links\r\n- [nxsim - Github](https://github.com/kentwait/nxsim)\r\n- [nxsim - PyPI](https://pypi.python.org/pypi/nxsim)\r\n- [SimPy v3.0 Documentation](https://simpy.readthedocs.org/en/latest/contents.html)\r\n- [Networkx v1.9 Documentation](http://networkx.github.io/documentation/networkx-1.9.1)\r\n- [matplotlib v1.4.3 Documentation](http://matplotlib.org/users/)\r\n- [ComplexNetworkSim Documentation](https://pythonhosted.org/ComplexNetworkSim)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}